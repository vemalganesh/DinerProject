/*
Deployment script for Startup-Db

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "Startup-Db"
:setvar DefaultFilePrefix "Startup-Db"
:setvar DefaultDataPath "C:\Users\vemal\AppData\Local\Microsoft\VisualStudio\SSDT\DinerProject"
:setvar DefaultLogPath "C:\Users\vemal\AppData\Local\Microsoft\VisualStudio\SSDT\DinerProject"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Altering [dbo].[spAddRole]...';


GO
ALTER PROCEDURE [dbo].[spAddRole]
(
	@UserId nvarchar(128),
	@RoleName nvarchar(128)
)
AS
Begin
	DECLARE @RoleId NVARCHAR(128);
	Select @RoleId =(select Id from Roles where Name like @RoleName)

	Insert into [dbo].[UserRole(RS)](UserId,RoleId)
    Values (@UserId,@RoleId)  
END
GO
PRINT N'Altering [dbo].[spUpdateUser]...';


GO
ALTER PROCEDURE [dbo].[spUpdateUser]
(
	@Id nvarchar(128),
	@Name nvarchar(128),
	@Email nvarchar(128),
	@Password nvarchar(128),
	@Suspended bit,
	@EmailVerified  bit,
	@OutletGroup_Id nvarchar(128)
)
AS
Begin
	Update Users 
	set Id = @Id,
	Name = @Name,
	Email = @Email,
	Password = @Password,
	Suspended = @Suspended,
	EmailVerified = @EmailVerified,
	OutletGroup_Id = @OutletGroup_Id
    WHERE Id = @Id
END
GO
PRINT N'Altering [dbo].[spViewRole]...';


GO
ALTER PROCEDURE [dbo].[spViewRole]
(
	@UserId nvarchar(128)
)
As
Begin    
    select *    
    from Roles where Id in(select RoleId from [UserRole(RS)] where UserId = @UserId);
End
GO
PRINT N'Creating [dbo].[spGetUsersInRole]...';


GO
CREATE PROCEDURE [dbo].[spGetUsersInRole]
(
	@RoleName nvarchar(128)
)
AS
	SELECT u.* from Users u INNER JOIN [UserRole(RS)] ur ON ur.UserId = u.Id INNER JOIN 
	roles r ON r.Id = ur.RoleId WHERE r.Name = @RoleName;
RETURN 0
GO
PRINT N'Creating [dbo].[spIsInRole]...';


GO
CREATE PROCEDURE [dbo].[spIsInRole]
(
	@UserId nvarchar(128),
	@RoleName nvarchar(128)
)
AS
Begin  
	DECLARE @retVal int
    SELECT @retVal =  COUNT(*) from [UserRole(RS)] where UserId = @UserId And RoleId in (select Id
    from Roles where Name = @RoleName);

IF (@retVal > 0)
BEGIN
  SELECT 1
END
ELSE
BEGIN
    SELECT 0
END 
END
GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
SET IDENTITY_INSERT Roles ON
insert into Roles (Id,Name)
select 1, N'SuperAdmin'
where not exists (select 1 from dbo.Roles where Id = 1)
GO
insert into Roles (Id,Name)
select 2, N'Admin'
where not exists (select 2 from dbo.Roles where Id = 2)
GO
insert into Roles (Id,Name)
select 3, N'CompanyAdmin'
where not exists (select 3 from dbo.Roles where Id = 3)
GO
insert into Roles (Id,Name)
select 4, N'Manager'
where not exists (select 4 from dbo.Roles where Id = 4)
GO
insert into Roles (Id,Name)
select 5, N'User'
where not exists (select 5 from dbo.Roles where Id = 5)
GO
insert into Roles (Id,Name)
select 6, N'Guest'
where not exists (select 6 from dbo.Roles where Id = 6)
GO

GO
PRINT N'Update complete.';


GO
