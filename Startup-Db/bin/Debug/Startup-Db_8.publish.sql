/*
Deployment script for AppDb

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "AppDb"
:setvar DefaultFilePrefix "AppDb"
:setvar DefaultDataPath "C:\Users\vemal\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB"
:setvar DefaultLogPath "C:\Users\vemal\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'The following operation was generated from a refactoring log file 4450ce60-1f0b-4103-abdc-66ef0f4258ce';

PRINT N'Rename [dbo].[Users].[Passsword] to Password';


GO
EXECUTE sp_rename @objname = N'[dbo].[Users].[Passsword]', @newname = N'Password', @objtype = N'COLUMN';


GO
PRINT N'Dropping [dbo].[AK_Email]...';


GO
ALTER TABLE [dbo].[Users] DROP CONSTRAINT [AK_Email];


GO
PRINT N'Altering [dbo].[Users]...';


GO
ALTER TABLE [dbo].[Users] ALTER COLUMN [Email] NVARCHAR (128) NULL;

ALTER TABLE [dbo].[Users] ALTER COLUMN [Name] NVARCHAR (128) NULL;

ALTER TABLE [dbo].[Users] ALTER COLUMN [Password] NVARCHAR (128) NULL;


GO
PRINT N'Creating [dbo].[AK_Email]...';


GO
ALTER TABLE [dbo].[Users]
    ADD CONSTRAINT [AK_Email] UNIQUE NONCLUSTERED ([Email] ASC);


GO
PRINT N'Creating [dbo].[spAddUser]...';


GO
CREATE PROCEDURE [dbo].[spAddUser]
(
	@Id nvarchar(128),
	@Name nvarchar(128),
	@Email nvarchar(128),
	@Password nvarchar(128),
	@Suspended bit,
	@EmailVerified  bit,
	@OutletGroup_Id nvarchar(128)
)
AS
Begin
	Insert into Users(Id, Name, Email, Password, Suspended, EmailVerified,OutletGroup_Id)
    Values (@Id,@Name,@Email, @Password,@Suspended,@EmailVerified,@OutletGroup_Id)  
END
GO
PRINT N'Creating [dbo].[spDeleteUser]...';


GO
CREATE PROCEDURE [dbo].[spDeleteUser]
(
	@Id nvarchar(128)
)
AS
Begin
	Delete from Users 
    WHERE Id = @Id
END
GO
PRINT N'Creating [dbo].[spUpdateUser]...';


GO
CREATE PROCEDURE [dbo].[spUpdateUser]
(
	@Id nvarchar(128),
	@Name nvarchar(128),
	@Email nvarchar(128),
	@Password nvarchar(128),
	@Suspended bit,
	@EmailVerified  bit,
	@OutletGroup_Id nvarchar(128)
)
AS
Begin
	Update Users 
	set Id = @Id,
	Name = @Name,
	Email = @Email,
	Suspended = @Suspended,
	EmailVerified = @EmailVerified,
	OutletGroup_Id = @OutletGroup_Id
    WHERE Id = @Id
END
GO
PRINT N'Creating [dbo].[spViewUser]...';


GO
CREATE PROCEDURE [dbo].[spViewUser]
as    
Begin    
    select *    
    from Users
End
GO
-- Refactoring step to update target server with deployed transaction logs
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '4450ce60-1f0b-4103-abdc-66ef0f4258ce')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('4450ce60-1f0b-4103-abdc-66ef0f4258ce')

GO

GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/


--insert into dbo.Roles (Name)
--select 1, N'SuperAdmin'
--where not exists (select 1 from dbo.Roles where Id = 1)
--go
--insert into dbo.Roles (Name)
--select 2, N'Admin'
--where not exists (select 2 from dbo.Roles where Id = 2)
--go
--insert into dbo.Roles (Name)
--select 3, N'CompanyAdmin'
--where not exists (select 3 from dbo.Roles where Id = 3)
--go
--insert into dbo.Roles (Name)
--select 4, N'Manager'
--where not exists (select 4 from dbo.Roles where Id = 4)
--go
--insert into dbo.Roles (Name)
--select 5, N'User'
--where not exists (select 5 from dbo.Roles where Id = 5)
--go
--insert into dbo.Roles (Name)
--select 6, N'Guest'
--where not exists (select 6 from dbo.Roles where Id = 6)
--go
GO

GO
PRINT N'Update complete.';


GO
