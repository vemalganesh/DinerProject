/*
Deployment script for AppDb

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "AppDb"
:setvar DefaultFilePrefix "AppDb"
:setvar DefaultDataPath "C:\Users\vemal\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB"
:setvar DefaultLogPath "C:\Users\vemal\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Dropping [dbo].[AK_Name]...';


GO
ALTER TABLE [dbo].[Company] DROP CONSTRAINT [AK_Name];


GO
PRINT N'Altering [dbo].[Company]...';


GO
ALTER TABLE [dbo].[Company] ALTER COLUMN [Address] NVARCHAR (128) NULL;

ALTER TABLE [dbo].[Company] ALTER COLUMN [DbConnStr] NVARCHAR (128) NULL;

ALTER TABLE [dbo].[Company] ALTER COLUMN [Name] NVARCHAR (128) NULL;


GO
PRINT N'Creating [dbo].[AK_Name]...';


GO
ALTER TABLE [dbo].[Company]
    ADD CONSTRAINT [AK_Name] UNIQUE NONCLUSTERED ([Name] ASC);


GO
PRINT N'Creating [dbo].[UsersAndCompany]...';


GO
CREATE VIEW [dbo].[UsersAndCompany]
	AS 
	SELECT [c].[Id] as companyId, [c].[Name] as companyName, [c].[Address] as companyAdd, [c].[DbConnStr], [c].[Suspended] as companyStat
	, [c].[ExpDate], [o].[Id], [o].[Name], [o].[OutletCode], [o].[Address], [o].[Suspended], 
	[o].[Company_Id], [o].[Group_Id]
FROM Company as c
INNER JOIN Outlets as o
    ON c.Id = o.Company_Id
GO
PRINT N'Creating [dbo].[spAddCompany]...';


GO
CREATE PROCEDURE [dbo].[spAddCompany]
(
	@Id nvarchar(128),
	@Name nvarchar(128),
	@Address nvarchar(128),
	@DbConnStr nvarchar(128),
	@Suspended bit,
	@ExpDate datetime
)
AS
Begin
	Insert into Company (Id,Name,Address,DbConnStr, Suspended, ExpDate)
    Values (@Id,@Name,@Address, @DbConnStr,@Suspended,@ExpDate)  
END
GO
PRINT N'Creating [dbo].[spDeleteCompany]...';


GO
CREATE PROCEDURE [dbo].[spDeleteCompany]
(
	@Id nvarchar(128)
)
AS
Begin
	Delete from Company 
    WHERE Id = @Id
END
GO
PRINT N'Creating [dbo].[spUpdateCompany]...';


GO
CREATE PROCEDURE [dbo].[spUpdateCompany]
(
	@Id nvarchar(128),
	@Name nvarchar(128),
	@Address nvarchar(128),
	@DbConnStr nvarchar(128),
	@Suspended bit,
	@ExpDate datetime
)
AS
Begin
	Update Company 
	set Id = @Id,
	Name = @Name,
	Address = @Address,
	DbConnStr = @DbConnStr,
	Suspended = @Suspended,
	ExpDate = @ExpDate
    WHERE Id = @Id
END
GO
PRINT N'Creating [dbo].[spViewCompany]...';


GO
CREATE PROCEDURE [dbo].[spViewCompany]
as    
Begin    
    select *    
    from Company
End
GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/


insert into dbo.Roles (Name)
select 1, N'SuperAdmin'
where not exists (select 1 from dbo.Roles where Id = 1)
GO
insert into dbo.Roles (Name)
select 2, N'Admin'
where not exists (select 2 from dbo.Roles where Id = 2)
GO
insert into dbo.Roles (Name)
select 3, N'CompanyAdmin'
where not exists (select 3 from dbo.Roles where Id = 3)
GO
insert into dbo.Roles (Name)
select 4, N'Manager'
where not exists (select 4 from dbo.Roles where Id = 4)
GO
insert into dbo.Roles (Name)
select 5, N'User'
where not exists (select 5 from dbo.Roles where Id = 5)
GO
insert into dbo.Roles (Name)
select 6, N'Guest'
where not exists (select 6 from dbo.Roles where Id = 6)
GO

GO
PRINT N'Update complete.';


GO
